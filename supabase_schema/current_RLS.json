[
  {
    "schema": "public",
    "table": "book_loans",
    "policyname": "Allow borrower or lender to read",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "((auth.uid() = lender_id) OR (auth.uid() = borrower_id))",
    "with_check": null
  },
  {
    "schema": "public",
    "table": "book_requests",
    "policyname": "Users can delete their own requests",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "DELETE",
    "qual": "(auth.uid() = requested_by)",
    "with_check": null
  },
  {
    "schema": "public",
    "table": "book_requests",
    "policyname": "Users can request books",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "((auth.uid() = requested_by) AND (requested_by <> requested_to) AND (requested_to = ( SELECT b.user_id\n   FROM books b\n  WHERE (b.id = book_requests.book_id))))"
  },
  {
    "schema": "public",
    "table": "book_requests",
    "policyname": "Users can update relevant requests",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "UPDATE",
    "qual": "((auth.uid() = requested_by) OR (auth.uid() = requested_to))",
    "with_check": "(((auth.uid() = requested_by) OR (auth.uid() = requested_to)) AND (requested_by <> requested_to) AND (requested_to = ( SELECT b.user_id\n   FROM books b\n  WHERE (b.id = book_requests.book_id))))"
  },
  {
    "schema": "public",
    "table": "book_requests",
    "policyname": "Users can view their book requests",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "((auth.uid() = requested_by) OR (auth.uid() = requested_to))",
    "with_check": null
  },
  {
    "schema": "public",
    "table": "book_reviews",
    "policyname": "Anyone can view book reviews",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "true",
    "with_check": null
  },
  {
    "schema": "public",
    "table": "book_reviews",
    "policyname": "Users can insert their own book reviews",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(auth.uid() = reviewer_id)"
  },
  {
    "schema": "public",
    "table": "book_reviews",
    "policyname": "book_reviews_delete_own",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "DELETE",
    "qual": "(reviewer_id = auth.uid())",
    "with_check": null
  },
  {
    "schema": "public",
    "table": "book_reviews",
    "policyname": "book_reviews_insert_non_owner",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "((reviewer_id = auth.uid()) AND (EXISTS ( SELECT 1\n   FROM books b\n  WHERE ((b.id = book_reviews.book_id) AND (b.user_id <> auth.uid())))))"
  },
  {
    "schema": "public",
    "table": "book_reviews",
    "policyname": "book_reviews_select_all",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "SELECT",
    "qual": "true",
    "with_check": null
  },
  {
    "schema": "public",
    "table": "book_reviews",
    "policyname": "book_reviews_update_own",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "UPDATE",
    "qual": "(reviewer_id = auth.uid())",
    "with_check": "(reviewer_id = auth.uid())"
  },
  {
    "schema": "public",
    "table": "books",
    "policyname": "Anyone can view available books",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(archived = false)",
    "with_check": null
  },
  {
    "schema": "public",
    "table": "books",
    "policyname": "Users can manage their own books",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "ALL",
    "qual": "(auth.uid() = user_id)",
    "with_check": "(auth.uid() = user_id)"
  },
  {
    "schema": "public",
    "table": "books_catalog",
    "policyname": "Users can insert catalog entries",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "((created_by IS NULL) OR (auth.uid() = created_by))"
  },
  {
    "schema": "public",
    "table": "books_catalog",
    "policyname": "Users can view catalog entries",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "true",
    "with_check": null
  },
  {
    "schema": "public",
    "table": "profiles",
    "policyname": "Users can delete their own profile",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "DELETE",
    "qual": "(auth.uid() = id)",
    "with_check": null
  },
  {
    "schema": "public",
    "table": "profiles",
    "policyname": "Users can insert their own profile",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(auth.uid() = id)"
  },
  {
    "schema": "public",
    "table": "profiles",
    "policyname": "Users can update their own profile",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "UPDATE",
    "qual": "(auth.uid() = id)",
    "with_check": null
  },
  {
    "schema": "public",
    "table": "profiles",
    "policyname": "Users can view their own profile",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(auth.uid() = id)",
    "with_check": null
  },
  {
    "schema": "public",
    "table": "return_requests",
    "policyname": "Borrower or lender can read return requests",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "((auth.uid() = requested_by) OR (auth.uid() IN ( SELECT book_loans.lender_id\n   FROM book_loans\n  WHERE (book_loans.id = return_requests.loan_id))))",
    "with_check": null
  },
  {
    "schema": "public",
    "table": "return_requests",
    "policyname": "Borrower or lender can request return",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "((auth.uid() = requested_by) AND ((auth.uid() IN ( SELECT book_loans.borrower_id\n   FROM book_loans\n  WHERE (book_loans.id = return_requests.loan_id))) OR (auth.uid() IN ( SELECT book_loans.lender_id\n   FROM book_loans\n  WHERE (book_loans.id = return_requests.loan_id)))))"
  },
  {
    "schema": "public",
    "table": "return_requests",
    "policyname": "Only lender can update return status",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "UPDATE",
    "qual": "(auth.uid() IN ( SELECT book_loans.lender_id\n   FROM book_loans\n  WHERE (book_loans.id = return_requests.loan_id)))",
    "with_check": null
  },
  {
    "schema": "public",
    "table": "saved_books",
    "policyname": "Can save books for self",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(auth.uid() = user_id)"
  },
  {
    "schema": "public",
    "table": "saved_books",
    "policyname": "Can unsave own books",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "DELETE",
    "qual": "(auth.uid() = user_id)",
    "with_check": null
  },
  {
    "schema": "public",
    "table": "saved_books",
    "policyname": "Can view own saved books",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(auth.uid() = user_id)",
    "with_check": null
  },
  {
    "schema": "public",
    "table": "saved_books",
    "policyname": "Users can remove their saved books",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "DELETE",
    "qual": "(auth.uid() = user_id)",
    "with_check": null
  },
  {
    "schema": "public",
    "table": "saved_books",
    "policyname": "Users can save books for themselves",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(auth.uid() = user_id)"
  },
  {
    "schema": "public",
    "table": "saved_books",
    "policyname": "Users can view their saved books",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(auth.uid() = user_id)",
    "with_check": null
  },
  {
    "schema": "public",
    "table": "transfers",
    "policyname": "Only involved users can insert transfer",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(((auth.uid() = from_user) OR (auth.uid() = to_user)) AND (EXISTS ( SELECT 1\n   FROM book_requests br\n  WHERE ((br.id = transfers.request_id) AND (br.book_id = transfers.book_id) AND (br.requested_by = transfers.to_user) AND (br.requested_to = transfers.from_user) AND (br.status = 'accepted'::text)))))"
  },
  {
    "schema": "public",
    "table": "transfers",
    "policyname": "Only involved users can update transfer",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "UPDATE",
    "qual": "((auth.uid() = from_user) OR (auth.uid() = to_user))",
    "with_check": "(((auth.uid() = from_user) OR (auth.uid() = to_user)) AND (EXISTS ( SELECT 1\n   FROM book_requests br\n  WHERE ((br.id = transfers.request_id) AND (br.book_id = transfers.book_id) AND (br.requested_by = transfers.to_user) AND (br.requested_to = transfers.from_user)))))"
  },
  {
    "schema": "public",
    "table": "transfers",
    "policyname": "Users involved in transfer can view",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "((auth.uid() = from_user) OR (auth.uid() = to_user))",
    "with_check": null
  },
  {
    "schema": "public",
    "table": "user_reviews",
    "policyname": "Reviewer and reviewee can view the review",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "((auth.uid() = reviewer_id) OR (auth.uid() = reviewee_id))",
    "with_check": null
  },
  {
    "schema": "public",
    "table": "user_reviews",
    "policyname": "Users can review other users",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "((auth.uid() = reviewer_id) AND (reviewer_id <> reviewee_id) AND (EXISTS ( SELECT 1\n   FROM profiles p\n  WHERE (p.id = user_reviews.reviewee_id))))"
  },
  {
    "schema": "storage",
    "table": "objects",
    "policyname": "Allow authenticated upload",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(auth.role() = 'authenticated'::text)"
  },
  {
    "schema": "storage",
    "table": "objects",
    "policyname": "Allow public read",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "true",
    "with_check": null
  }
]
